{-
Q1 give three more examples of monoids
the carrier sets must be different from the examples and from each other
be sure to reason about monoid laws
LAW
1.Identity
x <> mempty = x (right¬†identity)
mempty <> ùë• = ùë• (left¬†identity) 
2.associativity x <> (y <> z) = (x <> y) <> z
--------------Answer--------------
1.carrier: set of negative integers
operator(min)
-identity ‡∏Ç‡∏≠‡∏á min ‡∏Ñ‡∏∑‡∏≠ -1 min ‡∏Ç‡∏≠‡∏á x ‡πÉ‡∏î‡πÜ ‡∏Å‡∏±‡∏ö -1 ‡∏à‡∏∞‡πÑ‡∏î‡πâ x ‡πÄ‡∏™‡∏°‡∏≠
-min(x,min(y,z)) = min(min(x,y),z) ‡∏à‡∏∞‡πÑ‡∏î‡πâ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

2.Carrier: Set of Sets
Operator: intersection (Set Intersection)
-Identity ‡∏Ç‡∏≠‡∏á intersection ‡∏Ñ‡∏∑‡∏≠ Universal Set (U) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ x intersection U = x ‡πÄ‡∏™‡∏°‡∏≠
-x intersection (y intersection z) = (x intersection y) intersection z  ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

3. Carrier: (a -> a)
Operator: (.) (Function Composition)
-Identity ‡∏Ç‡∏≠‡∏á Function Composition ‡∏Ñ‡∏∑‡∏≠ id 
f . id = f    Right identity
id . f = f    Left identity
-(f . g) . h = f . (g . h) ‡∏à‡∏∞‡πÑ‡∏î‡πâ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏™‡∏°‡∏≠‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
 -}

{-
Q2 using newtype, declare monoid instances for Bool, where
operator: (&&)
operator: (||)
-}

newtype And = And {getAnd :: Bool} deriving (Show)
instance Semigroup And where
    And x <> And y = And (x && y)

instance Monoid And where
    mempty = And True

newtype Or = Or {getOr :: Bool} deriving (Show)
instance Semigroup Or where
    Or x <> Or y = Or (x || y)

instance Monoid Or where
    mempty = Or False

--define function maybeBind :: Maybe a -> (a -> Maybe b) -> Maybe b
maybeBind :: Maybe a -> (a -> Maybe b) -> Maybe b
maybeBind Nothing _ = Nothing
maybeBind (Just x) f = f x

--define function listBind :: [a] -> (a -> [b]) -> [b]
listBind :: [a] -> (a -> [b]) -> [b]
listBind [] _ = []
listBind (x:xs) f = f x ++ listBind xs f

--define function eitherBind :: Either r a -> (a -> Either r b) -> Either r b
eitherBind :: Either r a -> (a -> Either r b) -> Either r b
eitherBind (Left r) _ = Left r
eitherBind (Right x) f = f x

--define function arrowBind :: (r -> a) -> (a -> (r -> b)) -> (r -> b)
arrowBind :: (r -> a) -> (a -> (r -> b)) -> (r -> b)
arrowBind f g = \r -> g (f r) r

--define function pairBind :: (r, a) -> (a -> (r, b)) -> (r, b)
pairBind :: (Monoid r) => (r, a) -> (a -> (r, b)) -> (r, b)
pairBind (r, x) f = (r <> r', y)
  where
    (r', y) = f x
--what do we need to know about r?
-- r ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô monoid
--‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏Ø‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏Ø‡πÑ‡∏õ‡∏ï‡∏≤‡∏≤‡∏°‡∏Å‡∏é‡∏Ñ‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ identity ‡πÅ‡∏•‡∏∞‡∏°‡∏µ associativity ‡∏Ç‡∏≠‡∏á operation (<>)
